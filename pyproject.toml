[project]
name = "vunnel"
dynamic = ["version"]
requires-python = "<=3.13,>=3.11"
authors = [
    {name = "Alex Goodman", email = "alex.goodman@anchore.com"},
]
license = {text = "Apache-2.0"}
description = "vunnel ~= 'vulnerability data funnel'"
readme = "README.md"
keywords = ["vulnerability", "data", "aggregator", "grype", "vulnerability-data"]
classifiers = ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Operating System :: MacOS", "Topic :: Security", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"]
dependencies = [
    "click<9.0.0,>=8.1.3",
    "requests<3.0.0,>=2.28.1",
    "colorlog<7.0.0,>=6.7.0",
    "PyYAML<7.0,>=6.0",
    "ijson<3.0,>=2.5.1",
    "xxhash<4.0.0,>=3.1.0",
    "cvss<4.0,>=2.6",
    "python-dateutil<3.0.0,>=2.8.2",
    "defusedxml<1.0.0,>=0.7.1",
    "orjson<4.0.0,>=3.8.6",
    "SQLAlchemy<2.0,>=1.4.46",
    "mergedeep<2.0.0,>=1.3.4",
    "importlib-metadata<9.0.0,>=7.0.1",
    "xsdata[cli,lxml,soap]<23.0,>=22.12",
    "pytest-snapshot<1.0.0,>=0.9.0",
    "mashumaro<4.0,>=3.10",
    "iso8601<3.0.0,>=2.1.0",
    "zstandard<0.24,>=0.22",
    "packageurl-python<1.0.0,>=0.16.0",
]

[project.urls]
repository = "https://github.com/anchore/vunnel"

[project.scripts]
vunnel = "vunnel.cli:run"

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "uv-dynamic-versioning"]

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
vcs = "git"
style = "semver"

[tool.uv]
trusted-publishing = "always"

[tool.pytest.ini_options]
cache_dir = ".cache/pytest"

[tool.mypy]
cache_dir = ".cache/mypy"
follow_imports = "silent"
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = '''(?x)(
    ^src/vunnel/providers/alpine/parser\.py$      # ported from enterprise, never had type hints
    | ^src/vunnel/providers/amazon/parser\.py$    # ported from enterprise, never had type hints
    | ^src/vunnel/providers/debian/parser\.py$    # ported from enterprise, never had type hints
    | ^src/vunnel/providers/github/parser\.py$    # ported from enterprise, never had type hints
    | ^src/vunnel/providers/mariner/model/        # generated code
    | ^src/vunnel/providers/nvd/parser\.py$       # ported from enterprise, never had type hints
    | ^src/vunnel/providers/oracle/parser\.py$    # ported from enterprise, never had type hints
    | ^src/vunnel/providers/rhel/parser\.py$      # ported from enterprise, never had type hints
    | ^src/vunnel/providers/rhel/oval_parser\.py$      # ported from enterprise, never had type hints
    | ^src/vunnel/providers/sles/parser\.py$      # ported from enterprise, never had type hints
    | ^src/vunnel/providers/ubuntu/git\.py$       # ported from enterprise, never had type hints
    | ^src/vunnel/providers/ubuntu/parser\.py$    # ported from enterprise, never had type hints
    | ^src/vunnel/providers/wolfi/parser\.py$     # ported from enterprise, never had type hints
    | ^src/vunnel/utils/oval_v2.py$               # ported from enterprise, never had type hints
    | ^src/vunnel/utils/oval_parser.py$           # ported from enterprise, never had type hints
    | ^src/vunnel/utils/fdb.py$                   # ported from enterprise, never had type hints
    | ^src/vunnel/utils/vulnerability.py$         # ported from enterprise, never had type hints
    | ^tests/.*$     # any tests
)'''

[tool.coverage.run]
omit = [
  ".*",
  "*/site-packages/*",
  "*/venv/*",
  "tests/*",
  "src/vunnel/__main__.py",
  "src/vunnel/cli/__init__.py",
]

[tool.coverage.report]
fail_under = 75


[tool.ruff.format]
exclude = [
    ".eggs",         # exclude a few common directories in the
    ".git",          # root of the project
    ".hg",
    ".mypy_cache",
    ".tox",
    ".venv",
    "_build",
    "buck-out",
    "build",
    "dist",
    "data",
    "backup",
    "src/vunnel/providers/mariner/model", # files in here are generated
    "tests/quality/vulnerability-match-labels",
    "tests/quality/.yardstick",
    "tests/quality/data",
    "tests/quality/build",
    "tests/quality/bin",
]

[tool.ruff]
cache-dir = ".cache/ruff"
line-length = 150
extend-exclude = [
  "**/tests/**",
  "src/vunnel/providers/mariner/model/**" # these are generated
]

[tool.ruff.lint]
ignore = [
  "ARG001", # unused args are ok, as they communicate intent in interfaces, even if not used in impls.
  "ARG002", # unused args are ok, as they communicate intent in interfaces, even if not used in impls.
  "G004", # it's ok to use formatted strings for logging
  "PGH004", # no blanked "noqa" usage, can be improved over time, but not now
  "PLR2004", # a little too agressive, not allowing any magic numbers
  "PLW2901", # "Outer for loop variable X overwritten by inner assignment target", not useful in most cases
  "UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)` -- not compatible with python 3.9 (even with __future__ import)
]

select = [
  "A",   # flake8-builtins
  # "ANN", # flake8-annotations   # this is great, but let mypy handle this so it can honor type:ignore comments without noqa comments too
  "ARG", # flake8-unused-arguments
  "B",   # flake8-bugbear
  "C",   # mccabe
  "C4",  # flake8-comprehensions
  "COM", # flake8-commas
  "DTZ", # flake8-datetimez
  "E",   # pycodestyle, errors
  # "EM",  # flake8-errmsg     # seems to aggressive relative to the current codebase
  # "ERA", # flake8-eradicate  # not all code in comments should be removed
  "EXE", # flake8-executable
  "F",   # pyflakes
  "G",   # flake8-logging-format
  "I",   # isort
  "ICN", # flake8-import-conventions
  "INP", # flake8-no-pep420
  "ISC", # flake8-implicit-str-concat
  "PGH", # pygrep-hooks
  "PIE", # flake8-pie
  "PL",  # pylint     (this can be broken down into more checks if needed)
  "PT",  # flake8-pytest-style
  # "PTH", # flake8-use-pathlib  # the codebase is not ready for this yet, but would be nice to add
  "Q",   # flake8-quotes
  "RET", # flake8-return
  "RSE", # flake8-raise
  "RUF", # ruff specific rules
  "S",   # flake8-bandit
  "SIM", # flake8-simplify
  "SLF", # flakes8-self
  "T10", # flake8-debugger
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  # "TRY", # tryceratops   # seems to aggressive relative to the current codebase
  "UP",  # pyupgrade
  "W",   # pycodestyle, warnings
  "YTT", # flake8-2020
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"json.dump".msg = "Use orjson.dumps instead"
"json.dumps".msg = "Use orjson.dumps instead"
"json.load".msg = "Use orjson.loads instead"
"json.loads".msg = "Use orjson.loads instead"

[dependency-groups]
dev = [
    "pytest<9.0.0,>=7.2.2",
    "pre-commit<5.0,>=3.2",
    "jsonschema<5.0.0,>=4.17.3",
    "pytest-unordered<0.7.0,>=0.5.2",
    "pytest-sugar<1.1.0,>=0.9.6",
    "pytest-clarity<2.0.0,>=1.0.1",
    "pytest-cov<7,>=4",
    "pytest-picked<0.6.0,>=0.4.6",
    "pytest-mock<4.0.0,>=3.10.0",
    "pytest-xdist<4.0.0,>=3.2.1",
    "types-PyYAML<7.0.0.0,>=6.0.12.5",
    "types-requests<3.0.0.0,>=2.28.11.7",
    "mypy<2.0,>=1.1",
    "radon<7.0,>=5.1",
    "dunamai<2.0.0,>=1.15.0",
    "ruff<1.0.0,>=0.9.2",
    "yardstick>=0.12.1",
    "tabulate==0.9.0",
    "tox<5.0.0,>=4.11.3",
    "uv-dynamic-versioning>=0.6.0",
]
